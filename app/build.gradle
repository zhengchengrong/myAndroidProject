apply plugin: 'com.android.application'
apply plugin: 'packer'
apply from: 'tinkerpatch.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdk
    buildToolsVersion rootProject.ext.buildTools
    defaultConfig {
        applicationId "com.eaphone.g08android"
        minSdkVersion rootProject.ext.minSdk
        targetSdkVersion rootProject.ext.targetSdk
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        v2 {
            storeFile file("../android.jks")
            storePassword "123456"
            keyAlias "android"
            keyPassword "123456"
            v2SigningEnabled true
        }

        v1 {
            storeFile file("../android.jks")
            storePassword "123456"
            keyAlias "android"
            keyPassword "123456"
            v2SigningEnabled false
        }

    }

    packer {
        archiveNameFormat = '${buildType}-v${versionName}-${channel}'
        archiveOutput = new File(project.rootProject.buildDir, "apks")
//    channelList = ['*Douban*', 'Google/', '中文/@#市场', 'Hello@World',
//                   'GradleTest', '20070601!@#$%^&*(){}:"<>?-=[];\',./']
    channelFile = new File(project.rootDir, "markets.txt")
//        channelMap = [
//                "Cat" : project.rootProject.file("channels/cat.txt"),
//                "Dog" : project.rootProject.file("channels/dog.txt"),
//                "Fish": project.rootProject.file("channels/channels.txt")
//        ]
    }

    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
        release {
            signingConfig signingConfigs.v2
            minifyEnabled false
        }

        beta {
            signingConfig signingConfigs.v1
            minifyEnabled false
        }

        alpha {
            minifyEnabled false
        }
    }

    /** 若有编译多flavors需求,可在flavors中覆盖以下参数
     *  你也可以直接通过tinkerPatchAllFlavorDebug/tinkerPatchAllFlavorRelease, 一次编译所有的flavor补丁包
     *  注意的是:除非你不同的flavor代码是不一样的,不然建议采用zip comment或者文件方式生成渠道信息
     **/
//    productFlavors {
//        flavor {
//            flavorName = "flavor1"
//            // 后台需要按照每个flavor的appVersion来建立独立的工程，并单独下发补丁
//            appVersion = "${tinkerpatchSupport.appVersion}_${flavorName}"
//
//            pathPrefix = "${bakPath}/${baseInfo}/${flavorName}${buildType}/"
//            name = "${project.name}-${flavorName}${buildType}"
//
//            baseApkFile = "${pathPrefix}/${name}.apk"
//            baseProguardMappingFile = "${pathPrefix}/${name}-mapping.txt"
//            baseResourceRFile = "${pathPrefix}/${name}-R.txt"
//        }
//
//        flavor {
//            flavorName = "flavor2"
//            // 后台需要按照每个flavor的appVersion来建立独立的工程，并单独下发补丁
//            appVersion = "${tinkerpatchSupport.appVersion}_${flavorName}"
//
//            pathPrefix = "${bakPath}/${baseInfo}/${flavorName}${buildType}/"
//            name = "${project.name}-${flavorName}${buildType}"
//
//            baseApkFile = "${pathPrefix}/${name}.apk"
//            baseProguardMappingFile = "${pathPrefix}/${name}-mapping.txt"
//            baseResourceRFile = "${pathPrefix}/${name}-R.txt"
//        }
//    }


}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:appcompat-v7:${rootProject.ext.support}"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    compile project(':RxTools-library')

    compile "io.reactivex.rxjava2:rxjava:2.1.1"
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    // 加HttpLoggingInterceptor进行调试
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    // RxLifecycle
    compile 'com.trello.rxlifecycle2:rxlifecycle-components:2.1.0'


    // dagger 达 葛
    compile 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'
    //java注解
    compile 'org.glassfish:javax.annotation:10.0-b28'


    compile 'org.greenrobot:greendao:3.2.2' // add library

    // 加载进度条框架
    compile 'com.github.ybq:Android-SpinKit:1.1.0'

     // 下拉刷新，上拉加载框架 https://github.com/scwang90/SmartRefreshLayout
    compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.3'

 // 因为Android M权限问题导致的"Permission Denial: reading com.android.providers.media.MediaProvider"解决办法
//    compile "com.github.hotchemi:permissionsdispatcher:2.1.2"
//    apt "com.github.hotchemi:permissionsdispatcher-processor:2.1.2"

    // 集成腾讯热更新
    // 若使用annotation需要单独引用,对于tinker的其他库都无需再引用
    provided("com.tinkerpatch.tinker:tinker-android-anno:1.8.0")
    compile("com.tinkerpatch.sdk:tinkerpatch-android-sdk:1.1.8")

    // 多渠道打包
    compile 'com.mcxiaoke.packer-ng:helper:2.0.0'
}
